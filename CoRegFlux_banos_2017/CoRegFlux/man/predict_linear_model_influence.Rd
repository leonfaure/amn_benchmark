% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CoregfluxFunctions.R
\name{predict_linear_model_influence}
\alias{predict_linear_model_influence}
\title{Predict the gene expression level based on condition-specific influence}
\usage{
predict_linear_model_influence(network, model,
  train_influence = regulatorInfluence(network, train_expression,
  min_Target), experiment_influence, train_expression, min_Target = 10,
  tol = 1e-10, aliases = NULL, verbose = 0)
}
\arguments{
\item{network}{a coregnet object}

\item{model}{A genome-scale metabolic model from a class modelOrg.}

\item{train_influence}{Optional, if is train_expression is provided.
An influence matrix as computed by the function \code{regulatorInfluence()} from
CoRegNet}

\item{experiment_influence}{Regulator influence scores for the condition of
interest as a named vector with the TF as names.}

\item{train_expression}{Gene expression of the training data set, not
necessary if train_influence is supplied. Should be numerical matrix
corresponding to the gene expression. Rownames should contain gene names/ids
 while samples should be in columns.}

\item{min_Target}{Optional. Use in case train_influence is not provided.
Default value = 10. See regulatorInfluence for more information.}

\item{tol}{Fluxes values below this threshold will be ignored. Default}

\item{aliases}{Optional, A two columns data.frame containing the name used in
the gene regulatory network and their equivalent in the genome-scale
metabolic model to allow the mapping of the GRN onto the GEM.
The colnames should be geneName_model and geneName_GRN}

\item{verbose}{Default to 0. Give informations about the process status}
}
\value{
The predicted genes expressions/states
}
\description{
Build a linear model and use it to predict the gene expression level from the
influence of an experiment
}
\examples{
data("SC_GRN_1")
data("SC_experiment_influence")
data("SC_EXP_DATA")
data("iMM904")
data("aliases_SC")
PredictedGeneState <- predict_linear_model_influence(network = SC_GRN_1,
                    experiment_influence = SC_experiment_influence,
                    train_expression = SC_EXP_DATA,
                    min_Target = 4,
                    model = iMM904,
                    aliases= aliases_SC)

GeneState<-data.frame("Name"=names(PredictedGeneState),
                    "State"=unname(PredictedGeneState))

}
